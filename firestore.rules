
/**
 * @fileoverview Firestore Security Rules for Harmony Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (playlists)
 * while allowing public read access for community content (songs, posts).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/songs/{songId}: Stores songs uploaded by each user.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists created by each user.
 * - /posts/{postId}: Stores all posts for the community feed.
 * - /posts/{postId}/comments/{commentId}: Stores comments for each post.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own data (playlists, posts, songs, comments).
 * - Anyone can read posts and comments in the community feed.
 * - Anyone can read any song from any user.
 * - User listing is disallowed for privacy.
 * - All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Protects the /users collection, allowing only authenticated users to create their own profile.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create /users/user_abc if authenticated.
     * @deny (create) User 'user_xyz' cannot create /users/user_abc.
     * @deny (get, list, update, delete) No one can get, list, update, or delete user documents directly.
     * @principle Enforces user-ownership; authenticated user can create only their own profile.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if false; // Disallow reading other user profiles for privacy
      allow list: if false; // Disallow listing all users
      allow update: if false; // Updates handled via specific functions/paths if needed
      allow delete: if false;

      /**
       * @description Protects the /users/{userId}/songs subcollection.
       * Users can only manage their own songs.
       * All users can read any song via a collection group query.
       */
      match /songs/{songId} {
        function isExistingOwner() {
            return isOwner(userId) && resource != null;
        }
        
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isSignedIn() && isExistingOwner() && request.resource.data.userId == resource.data.userId;
        allow delete: if isSignedIn() && isExistingOwner();
      }

      /**
       * @description Protects the /users/{userId}/playlists collection, ensuring only the owner can manage their playlists.
       * @path /users/{userId}/playlists/{playlistId}
       * @allow (create, get, list, update, delete) Only the owner can manage their playlists.
       * @principle Enforces strict user-ownership for playlist management.
       */
      match /playlists/{playlistId} {
          function isExistingOwner() {
              return isOwner(userId) && resource != null;
          }

          allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner() && request.resource.data.userId == resource.data.userId;
          allow delete: if isSignedIn() && isExistingOwner();
      }
    }
    
    /**
     * @description Public read access for all songs via collection group query.
     */
    match /{path=**}/songs/{songId} {
        allow get, list: if true;
    }


    /**
     * @description Manages the /posts collection for the community feed.
     * @path /posts/{postId}
     * @allow (list, get) Anyone can read posts for the community feed.
     * @allow (create) Authenticated users can create posts.
     * @allow (update, delete) Only the owner of the post can update or delete it.
     * @principle Allows a public read feed while restricting write access to owners.
     */
    match /posts/{postId} {
      function isPostOwner() {
        return request.auth.uid == resource.data.userId;
      }

       function isNewPostOwner() {
        return request.auth.uid == request.resource.data.userId;
      }
      
      function incomingData() {
        return request.resource.data;
      }

      function unchanged(field) {
          // If the field doesn't exist in incoming data, it's not being changed.
          // If it exists in both, check if they are the same.
          return !(field in incomingData()) || incomingData()[field] == resource.data[field];
      }

      function isLikingOrUnliking() {
        // This operation is valid if the user is only changing the 'likes' array
        // and nothing else.
        return incomingData().keys().hasOnly(['likes'])
                && unchanged('content')
                && unchanged('userId')
                && unchanged('username')
                && unchanged('userImage')
                && unchanged('createdAt')
                && unchanged('commentCount')
                && unchanged('imageUrl');
      }

      function isUpdatingCommentCount() {
        // This operation is valid if only the comment count is changing.
        return incomingData().keys().hasOnly(['commentCount'])
                && unchanged('content')
                && unchanged('userId')
                && unchanged('username')
                && unchanged('userImage')
                && unchanged('createdAt')
                && unchanged('likes')
                && unchanged('imageUrl');
      }

      allow list, get: if true;
      allow create: if isSignedIn() 
                      && isNewPostOwner()
                      && (incomingData().content.size() > 0 || ('imageUrl' in incomingData() && incomingData().imageUrl.size() > 0))
                      && incomingData().content is string
                      && (!('imageUrl' in incomingData()) || (incomingData().imageUrl is string));

      allow update: if isSignedIn() && (
                      // Case 1: The owner of the post is editing the content.
                      // We don't need to check all fields because they have full edit rights,
                      // except they cannot change likes or commentCount directly.
                      (isPostOwner() && unchanged('likes') && unchanged('commentCount')) ||
                      // Case 2: Any signed-in user is liking or unliking the post.
                      (!isPostOwner() && isLikingOrUnliking()) ||
                      // Case 3: A transaction is updating only the comment count.
                      isUpdatingCommentCount()
                    );


      allow delete: if isSignedIn() && isPostOwner();

       /**
       * @description Manages comments for each post.
       * @path /posts/{postId}/comments/{commentId}
       */
      match /comments/{commentId} {
        allow list, get: if true; // Anyone can read comments
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid; // Only signed in users can comment
        allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId; // Only the comment owner can edit/delete
      }
    }
  }
}
service firebase.storage {
  match /b/{bucket}/o {
    // Allow users to read and write their own files in a 'users/{uid}' directory
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
